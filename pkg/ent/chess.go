// Code generated by ent, DO NOT EDIT.

package ent

import (
	"chesss/pkg/ent/chess"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Chess is the model entity for the Chess schema.
type Chess struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,omitempty"`
	// 初始棋面
	Before string `json:"before,omitempty"`
	// 结束棋面
	After string `json:"after,omitempty"`
	// 频次
	Count        int64 `json:"count,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Chess) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chess.FieldID, chess.FieldCount:
			values[i] = new(sql.NullInt64)
		case chess.FieldBefore, chess.FieldAfter:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Chess fields.
func (c *Chess) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chess.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int64(value.Int64)
		case chess.FieldBefore:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field before", values[i])
			} else if value.Valid {
				c.Before = value.String
			}
		case chess.FieldAfter:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field after", values[i])
			} else if value.Valid {
				c.After = value.String
			}
		case chess.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				c.Count = value.Int64
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Chess.
// This includes values selected through modifiers, order, etc.
func (c *Chess) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Chess.
// Note that you need to call Chess.Unwrap() before calling this method if this Chess
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Chess) Update() *ChessUpdateOne {
	return NewChessClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Chess entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Chess) Unwrap() *Chess {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Chess is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Chess) String() string {
	var builder strings.Builder
	builder.WriteString("Chess(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("before=")
	builder.WriteString(c.Before)
	builder.WriteString(", ")
	builder.WriteString("after=")
	builder.WriteString(c.After)
	builder.WriteString(", ")
	builder.WriteString("count=")
	builder.WriteString(fmt.Sprintf("%v", c.Count))
	builder.WriteByte(')')
	return builder.String()
}

// Chesses is a parsable slice of Chess.
type Chesses []*Chess
