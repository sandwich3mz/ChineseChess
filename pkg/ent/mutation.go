// Code generated by ent, DO NOT EDIT.

package ent

import (
	"chesss/pkg/ent/chess"
	"chesss/pkg/ent/predicate"
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChess = "Chess"
)

// ChessMutation represents an operation that mutates the Chess nodes in the graph.
type ChessMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	before        *string
	after         *string
	count         *int64
	addcount      *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Chess, error)
	predicates    []predicate.Chess
}

var _ ent.Mutation = (*ChessMutation)(nil)

// chessOption allows management of the mutation configuration using functional options.
type chessOption func(*ChessMutation)

// newChessMutation creates new mutation for the Chess entity.
func newChessMutation(c config, op Op, opts ...chessOption) *ChessMutation {
	m := &ChessMutation{
		config:        c,
		op:            op,
		typ:           TypeChess,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChessID sets the ID field of the mutation.
func withChessID(id int64) chessOption {
	return func(m *ChessMutation) {
		var (
			err   error
			once  sync.Once
			value *Chess
		)
		m.oldValue = func(ctx context.Context) (*Chess, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Chess.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChess sets the old Chess of the mutation.
func withChess(node *Chess) chessOption {
	return func(m *ChessMutation) {
		m.oldValue = func(context.Context) (*Chess, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChessMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChessMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Chess entities.
func (m *ChessMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChessMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChessMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Chess.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBefore sets the "before" field.
func (m *ChessMutation) SetBefore(s string) {
	m.before = &s
}

// Before returns the value of the "before" field in the mutation.
func (m *ChessMutation) Before() (r string, exists bool) {
	v := m.before
	if v == nil {
		return
	}
	return *v, true
}

// OldBefore returns the old "before" field's value of the Chess entity.
// If the Chess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChessMutation) OldBefore(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBefore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBefore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBefore: %w", err)
	}
	return oldValue.Before, nil
}

// ResetBefore resets all changes to the "before" field.
func (m *ChessMutation) ResetBefore() {
	m.before = nil
}

// SetAfter sets the "after" field.
func (m *ChessMutation) SetAfter(s string) {
	m.after = &s
}

// After returns the value of the "after" field in the mutation.
func (m *ChessMutation) After() (r string, exists bool) {
	v := m.after
	if v == nil {
		return
	}
	return *v, true
}

// OldAfter returns the old "after" field's value of the Chess entity.
// If the Chess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChessMutation) OldAfter(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAfter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAfter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAfter: %w", err)
	}
	return oldValue.After, nil
}

// ResetAfter resets all changes to the "after" field.
func (m *ChessMutation) ResetAfter() {
	m.after = nil
}

// SetCount sets the "count" field.
func (m *ChessMutation) SetCount(i int64) {
	m.count = &i
	m.addcount = nil
}

// Count returns the value of the "count" field in the mutation.
func (m *ChessMutation) Count() (r int64, exists bool) {
	v := m.count
	if v == nil {
		return
	}
	return *v, true
}

// OldCount returns the old "count" field's value of the Chess entity.
// If the Chess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChessMutation) OldCount(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCount: %w", err)
	}
	return oldValue.Count, nil
}

// AddCount adds i to the "count" field.
func (m *ChessMutation) AddCount(i int64) {
	if m.addcount != nil {
		*m.addcount += i
	} else {
		m.addcount = &i
	}
}

// AddedCount returns the value that was added to the "count" field in this mutation.
func (m *ChessMutation) AddedCount() (r int64, exists bool) {
	v := m.addcount
	if v == nil {
		return
	}
	return *v, true
}

// ResetCount resets all changes to the "count" field.
func (m *ChessMutation) ResetCount() {
	m.count = nil
	m.addcount = nil
}

// Where appends a list predicates to the ChessMutation builder.
func (m *ChessMutation) Where(ps ...predicate.Chess) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChessMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChessMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Chess, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChessMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChessMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Chess).
func (m *ChessMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChessMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.before != nil {
		fields = append(fields, chess.FieldBefore)
	}
	if m.after != nil {
		fields = append(fields, chess.FieldAfter)
	}
	if m.count != nil {
		fields = append(fields, chess.FieldCount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChessMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chess.FieldBefore:
		return m.Before()
	case chess.FieldAfter:
		return m.After()
	case chess.FieldCount:
		return m.Count()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChessMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chess.FieldBefore:
		return m.OldBefore(ctx)
	case chess.FieldAfter:
		return m.OldAfter(ctx)
	case chess.FieldCount:
		return m.OldCount(ctx)
	}
	return nil, fmt.Errorf("unknown Chess field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChessMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chess.FieldBefore:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBefore(v)
		return nil
	case chess.FieldAfter:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAfter(v)
		return nil
	case chess.FieldCount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCount(v)
		return nil
	}
	return fmt.Errorf("unknown Chess field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChessMutation) AddedFields() []string {
	var fields []string
	if m.addcount != nil {
		fields = append(fields, chess.FieldCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChessMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case chess.FieldCount:
		return m.AddedCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChessMutation) AddField(name string, value ent.Value) error {
	switch name {
	case chess.FieldCount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCount(v)
		return nil
	}
	return fmt.Errorf("unknown Chess numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChessMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChessMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChessMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Chess nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChessMutation) ResetField(name string) error {
	switch name {
	case chess.FieldBefore:
		m.ResetBefore()
		return nil
	case chess.FieldAfter:
		m.ResetAfter()
		return nil
	case chess.FieldCount:
		m.ResetCount()
		return nil
	}
	return fmt.Errorf("unknown Chess field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChessMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChessMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChessMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChessMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChessMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChessMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChessMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Chess unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChessMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Chess edge %s", name)
}
